# Based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

dist: trusty
language: rust
services: docker
sudo: required

# DONE Rust builds on stable by default, this can be
# overridden on a case by case basis down below.

env:
  global:
    # DONE Update this to match the name of your project.
    - CRATE_NAME=ele

matrix:
  # DONE These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  include:
    # Android
    # - env: TARGET=aarch64-linux-android DISABLE_TESTS=1
    # - env: TARGET=arm-linux-androideabi DISABLE_TESTS=1
    - env: TARGET=armv7-linux-androideabi DISABLE_TESTS=1
      rust: nightly
    # - env: TARGET=i686-linux-android DISABLE_TESTS=1
    # - env: TARGET=x86_64-linux-android DISABLE_TESTS=1

    # iOS
    - env: TARGET=aarch64-apple-ios DISABLE_TESTS=1
      rust: nightly
      os: osx
    # - env: TARGET=armv7-apple-ios DISABLE_TESTS=1
    #   os: osx
    # - env: TARGET=armv7s-apple-ios DISABLE_TESTS=1
    #   os: osx
    # - env: TARGET=i386-apple-ios DISABLE_TESTS=1
    #   os: osx
    # - env: TARGET=x86_64-apple-ios DISABLE_TESTS=1
    #   os: osx

    # Linux
    # - env: TARGET=aarch64-unknown-linux-gnu
    # - env: TARGET=arm-unknown-linux-gnueabi
    # - env: TARGET=armv7-unknown-linux-gnueabihf
    # - env: TARGET=i686-unknown-linux-gnu
    # - env: TARGET=i686-unknown-linux-musl
    # - env: TARGET=mips-unknown-linux-gnu
    # - env: TARGET=mips64-unknown-linux-gnuabi64
    # - env: TARGET=mips64el-unknown-linux-gnuabi64
    # - env: TARGET=mipsel-unknown-linux-gnu
    # - env: TARGET=powerpc-unknown-linux-gnu
    # - env: TARGET=powerpc64-unknown-linux-gnu
    # - env: TARGET=powerpc64le-unknown-linux-gnu
    # - env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1
    # - env: TARGET=x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-musl
      rust: nightly

    # OSX
    # - env: TARGET=i686-apple-darwin
    #   os: osx
    - env: TARGET=x86_64-apple-darwin
      rust: nightly
      os: osx

    # *BSD
    # - env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
      rust: nightly
    # - env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1

    # Windows
    # - env: TARGET=x86_64-pc-windows-gnu

    # Bare metal
    # These targets don't support std and as such are likely not suitable for
    # most crates.
    # - env: TARGET=thumbv6m-none-eabi
    # - env: TARGET=thumbv7em-none-eabi
    # - env: TARGET=thumbv7em-none-eabihf
    # - env: TARGET=thumbv7m-none-eabi

    # Testing other channels
    # - env: TARGET=x86_64-unknown-linux-gnu
    #   rust: nightly
    # - env: TARGET=x86_64-apple-darwin
    #   os: osx
    #   rust: nightly

before_install:
  - set -e
  - rustup self update
  - rustup component add rustfmt-preview

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - cargo +nightly fmt -- --check
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  # DONE update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
  # - Paste the output down here
  api_key:
    secure: "TKALavHpmr54364wk2VgORM/XeX1clBIgM83dJpfcGmnAVC8oZTzyImY0zN6zW4CQK64POLtMZ8TqIq/0I0BvgVlWKxueoegdXtAjCaRnITWP1UmerXD5uK+6cy6YKq/If1OaqJEauaUMKzcu/hxwEYTAzGJzo8GqOb5kldKc4kxPRGfRUbipb5Eq1WCz5HTmzrAOyPrQe9m9opU6CJsBICJSQ2v4SqGiDy6Yb+c7jSJJpJzUqoXyHSZF+NygtBvFW5juWR/kmJpPZjbmL8EQznK+ism1O0HIhvHIi3yUOczWB8ciF6l2wpOYV1k+YocxuJCl9xVwJZpYhDegUAmRuQV0XGnXK6uYNk5ft7knP6wQsUeVXsbJHTsSJyymH3VY5+ALlmU09ddAGwWf09YiVMiGCvOJub6EbVnRZZXAcREERtGxZLFMYhpt2hzrqo0aVAV18vZsh8kcCeCHsHclIHIVPzJD5Av9t6Vt5fhdWEQZyMpXGJS+9R7YEHUbngXtFgAdoh6cW2NG2A9Tj5XghpE2Xk5wbp/+qommbXkbLao70m5HPWnTibdTh+r4uMA/RySXWIfDsuaX8+i3W08e8+79KuXrj49GTE8DTjUlPz14HIUh8+IU7JC0zFwMrJxtHA7QjwFkjcFTuhJc8jQZ4i1JorOBRehXGvfyY8qaeY="

  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # DONE Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = nightly
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
